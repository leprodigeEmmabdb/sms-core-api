"""
Django settings for django_christ_roi project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import logging
import os
from datetime import timedelta
from pathlib import Path
from dotenv import load_dotenv

from root.utils.projects import create_basic_folders

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'djoser',
    "corsheaders",
    'rest_framework',
    "drf_standardized_errors",
    'drf_yasg',
    'django_filters',
    "djecrety",
    "django_countries",
    "appuser",
    "appbroadcastsms",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = 'root.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'root.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Kinshasa'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
AUTH_USER_MODEL = 'appuser.User'

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        "Auth Token eg [Bearer (JWT) ]": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    "COERCE_DECIMAL_TO_STRING": False,
    # 'DEFAULT_AUTHENTICATION_CLASSES': ('root.utils.jwt_utils.JWTAuthentication',),
    'DEFAULT_PAGINATION_CLASS': "root.utils.drf_utils.CustomPageNumberPagination",
    # 'DEFAULT_PAGINATION_CLASS': "rest_framework.pagination.PageNumberPagination",
    # "PAGE_SIZE": 10,
    # 'EXCEPTION_HANDLER': 'root.utils.custom_rest_exceptions.custom_exception_handler'
    "EXCEPTION_HANDLER": "drf_standardized_errors.handler.exception_handler"
}
DRF_STANDARDIZED_ERRORS = {
    "ENABLE_IN_DEBUG_FOR_UNHANDLED_EXCEPTIONS": True,
    "EXCEPTION_HANDLER_CLASS": "root.utils.drf_utils.DFRExceptionHandler"
}

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

create_basic_folders(BASE_DIR, MEDIA_ROOT)
STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'root', 'static')
]

LOGGING = {
    'version': 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            'formatter': 'verbose'
        },
        "file": {
            "class": "logging.FileHandler",
            "filename": os.path.join(BASE_DIR, "logs", "general.log"),
            'formatter': 'verbose'

        },
        'errorfile': {
            'level': 'ERROR',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, "logs", 'error.log'),
            'when': 'midnight',  # daily, you can use 'midnight' as well
            "interval": 1,
            # 'backupCount': 100,  # 100 days backup
            'formatter': 'verbose',
        },
        'debugfile': {
            'level': 'DEBUG',
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(BASE_DIR, "logs", 'daily.log'),
            'when': 'midnight',  # daily, you can use 'midnight' as well
            "interval": 1,
            # 'backupCount': 100,  # 100 days backup
            'formatter': 'verbose',
        },
    },
    "loggers": {
        # "app_store":{
        # "app_store.views":{
        "": {
            'handlers': ['errorfile', "debugfile"],
            # "level": "ERROR"
        },
        "___": {
            'handlers': ['console', ],
            "level": "DEBUG"
        }
    },
    "formatters": {
        "verbose": {
            'format': '{asctime} ({levelname}) - {lineno} - {name} - {message}',
            # log_format = '%(levelname)s %(asctime)s %(module)s:%(funcName)s line:%(lineno)d %(message)s'
            'style': '{'
        }
    }
}

SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('JWT',),
    'ACCESS_TOKEN_LIFETIME': timedelta(days=60)
}

DOMAIN = 'utulivu.com'
SITE_NAME = 'Utulivu'

DJOSER = {
    "LOGIN_FIELD": "name",
    "PASSWORD_CHANGED_EMAIL_CONFIRMATION": True,
    "SEND_CONFIRMATION_EMAIL": True,
    "SEND_ACTIVATION_EMAIL": True,
    # "USER_CREATE_PASSWORD_RETYPE":True,
    "SERIALIZERS": {
        "user_create": "appuser.vues.user.sz_user.DjoserUserCreateSerializer",
        'current_user': 'appuser.vues.user.sz_user.DjoserCurrentUserSerializer',
        'activation': 'appuser.vues.user.sz_user.DjoserValidateUserSerializer',
        'password_reset': 'appuser.vues.user.sz_user.DjoserResetPasswordSerializer',
        'password_reset_confirm': 'appuser.vues.user.sz_user.DjoserValidatePwdResetSerializer',
    },
    "EMAIL":
        {
            "activation": "root.utils.djoser_emails.ActivationEmail",
            "confirmation": "root.utils.djoser_emails.ConfirmationEmail",
            "password_reset": "root.utils.djoser_emails.PasswordResetEmail",
            "password_changed_confirmation": "root.utils.djoser_emails.PasswordChangedConfirmationEmail",
            # "username_changed_confirmation": "djoser.email.UsernameChangedConfirmationEmail",
            # "username_reset": "djoser.email.UsernameResetEmail",
        }
    ,
    'PASSWORD_RESET_CONFIRM_URL': '#/password/reset/confirm/{uid}/{token}',
    'ACTIVATION_URL': '#/activate/{uid}/{token}',
}

# APPEND_SLASH = False
